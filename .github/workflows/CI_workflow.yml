name: CI_workflow
on: push
permissions:
  contents: read
  packages: read

jobs:
  linting_job:
    runs-on: ubuntu-24.04
    permissions:
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: checkout step
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the list of files that changed across commits
          fetch-depth: 0

      - name: Create .env file
        run: |
          echo "SENSOR_IDS=${{env.SENSOR_IDS }}" >> .env
          # Display the .env file for debugging (optional, don't use in production!)
          cat .env

      - name: Super-linter
        uses: super-linter/super-linter@v7.2.1
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_docker_image:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout step
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          push: false

  unit_testing_job:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout step
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo "SENSOR_IDS=${{env.SENSOR_IDS }}" >> .env
          # Display the .env file for debugging (optional, don't use in production!)
          cat .env

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest

  call_version_api_job:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout step
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.12
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Start application
        run: |
          python main.py &
           sleep 5
      - name: Call version API
        run: |
          curl -X GET http://127.0.0.1:5000/version
  sonarqube_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Server Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
      - name: SonarQube Server Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
